//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class WeatherAppEntities : DbContext
    {
        public WeatherAppEntities()
            : base("name=WeatherAppEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Position> Position { get; set; }
        public DbSet<Weather> Weather { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> uspAddPosition(string name, Nullable<double> lat, Nullable<double> lng)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var lngParameter = lng.HasValue ?
                new ObjectParameter("Lng", lng) :
                new ObjectParameter("Lng", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("uspAddPosition", nameParameter, latParameter, lngParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> uspAddWeather(Nullable<int> positionId, Nullable<double> temperature, string city, string symbolUrl, Nullable<System.DateTime> validTime, Nullable<System.DateTime> nextUpdate)
        {
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var temperatureParameter = temperature.HasValue ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(double));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var symbolUrlParameter = symbolUrl != null ?
                new ObjectParameter("SymbolUrl", symbolUrl) :
                new ObjectParameter("SymbolUrl", typeof(string));
    
            var validTimeParameter = validTime.HasValue ?
                new ObjectParameter("ValidTime", validTime) :
                new ObjectParameter("ValidTime", typeof(System.DateTime));
    
            var nextUpdateParameter = nextUpdate.HasValue ?
                new ObjectParameter("NextUpdate", nextUpdate) :
                new ObjectParameter("NextUpdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("uspAddWeather", positionIdParameter, temperatureParameter, cityParameter, symbolUrlParameter, validTimeParameter, nextUpdateParameter);
        }
    
        public virtual int uspDeletePosition(Nullable<int> positionId)
        {
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeletePosition", positionIdParameter);
        }
    
        public virtual int uspDeleteWeather(Nullable<int> positionId)
        {
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteWeather", positionIdParameter);
        }
    
        public virtual ObjectResult<string> uspGetPositionByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspGetPositionByName", nameParameter);
        }
    
        public virtual int uspUpdateWeather(Nullable<int> id, Nullable<int> positionId, Nullable<double> temperature, string city, string symbolUrl, Nullable<System.DateTime> validTime, Nullable<System.DateTime> nextUpdate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var temperatureParameter = temperature.HasValue ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(double));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var symbolUrlParameter = symbolUrl != null ?
                new ObjectParameter("SymbolUrl", symbolUrl) :
                new ObjectParameter("SymbolUrl", typeof(string));
    
            var validTimeParameter = validTime.HasValue ?
                new ObjectParameter("ValidTime", validTime) :
                new ObjectParameter("ValidTime", typeof(System.DateTime));
    
            var nextUpdateParameter = nextUpdate.HasValue ?
                new ObjectParameter("NextUpdate", nextUpdate) :
                new ObjectParameter("NextUpdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateWeather", idParameter, positionIdParameter, temperatureParameter, cityParameter, symbolUrlParameter, validTimeParameter, nextUpdateParameter);
        }
    
        public virtual ObjectResult<Weather> uspGetWeatherByPositionId(Nullable<int> positionId)
        {
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Weather>("uspGetWeatherByPositionId", positionIdParameter);
        }
    
        public virtual ObjectResult<Weather> uspGetWeatherByPositionId(Nullable<int> positionId, MergeOption mergeOption)
        {
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Weather>("uspGetWeatherByPositionId", mergeOption, positionIdParameter);
        }
    
        public virtual int uspDeleteWeatherByPositionId(Nullable<int> positionId)
        {
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteWeatherByPositionId", positionIdParameter);
        }
    
        public virtual int uspDeleteWeather1(Nullable<int> weatherId)
        {
            var weatherIdParameter = weatherId.HasValue ?
                new ObjectParameter("WeatherId", weatherId) :
                new ObjectParameter("WeatherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteWeather1", weatherIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> uspUpdatePosition(Nullable<int> id, string name, Nullable<double> lat, Nullable<double> lng)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var lngParameter = lng.HasValue ?
                new ObjectParameter("Lng", lng) :
                new ObjectParameter("Lng", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("uspUpdatePosition", idParameter, nameParameter, latParameter, lngParameter);
        }
    }
}
